name: MAIN CI & CD

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: logback.xml 설정
        run: |
          cd ./src/main
          mkdir resources
          cd ./resources
          touch ./logback.xml
          echo "$LOGBACK" > ./logback.xml
        env:
          LOGBACK: ${{ secrets.LOGBACK }}

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-    

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew build -x test

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_BACKEND_ROLE_ARN }}
          role-session-name: ${{ github.actor }}-${{ github.run_id }} # Unique session name 설정
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Docker image build
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
          docker build -t ${{ secrets.ECR_REPOSITORY }} .
          docker push ${{ secrets.ECR_REPOSITORY }}

      - name: Use session manager to deploy
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets '[{"Key":"InstanceIds","Values":["${{ secrets.INSTANCE_ID }}"]}]' \
            --parameters 'commands=["cd /home/ssm-user","docker pull '${{ secrets.ECR_REPOSITORY }}'","IMAGE='${{ secrets.ECR_REPOSITORY }}' docker compose -f docker-compose.yml down backend","IMAGE='${{ secrets.ECR_REPOSITORY }}' docker compose -f docker-compose.yml up -d backend"]' \
            --region ${{ secrets.AWS_REGION }}
