package ussum.homepage.infra.jpa.post.entity;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import ussum.homepage.global.error.exception.InvalidValueException;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import static ussum.homepage.global.error.status.ErrorStatus.INVALID_BOARDCODE;
import static ussum.homepage.global.error.status.ErrorStatus.INVALID_FILE_CATEGORY;

@RequiredArgsConstructor
@Getter
public enum FileCategory {

    //중앙운영위원회
    학생총회_결과보고("총학생회", "학생총회","결과보고"),
    전체학생대표자회의_결과보고("총학생회", "전체학생대표자회의", "결과보고"),
    확대운영위원회_결과보고("총학생회", "확대운영위원회", "결과보고"),
    중앙운영위원회_회의록("총학생회", "중앙운영위원회", "회의록"),
    총학생회칙("총학생회", "중앙운영위원회", "총학생회칙"),
    특별기구_운영세칙("총학생회", "특별기구", "특별기구 운영세칙"),

    //총학생회
    결산안("총학생회", "중앙집행위원회", "결산안"),
    활동보고("총학생회", "중앙집행위원회", "활동보고"),

    //학생복지위원회
    학생복지위원회("총학생회", "특별기구", "학생복지위원회"),

    //인권위원회
    인권위원회("총학생회", "특별기구", "인권위원회"),

    //교지편집위원회
    교지편집위원회("총학생회", "특별기구", "교지편집위원회"),

    //IT지원위원회
    IT지원위원회("총학생회", "특별기구", "IT지원위원회"),

    //선거위원회 (선거시행세칙)
    중앙선거시행세칙("중앙선거관리위원회","","선거시행세칙"),
    경영대학_선거시행세칙("경영대학 선거관리위원회","경영대학","선거시행세칙"),
    경제통상대학_선거시행세칙("경제통상대학 선거관리위원회","경제통상대학","선거시행세칙"),
    법과대학_선거시행세칙("법과대학 선거관리위원회","법과대학","선거시행세칙"),
    사회과학대학_선거시행세칙("사회과학대학 선거관리위원회","사회과학대학","선거시행세칙"),
    인문대학_선거시행세칙("인문대학 선거관리위원회","인문대학","선거시행세칙"),
    자연과학대학_선거시행세칙("자연과학대학 선거관리위원회","자연과학대학","선거시행세칙"),
    IT대학_선거시행세칙("IT대학 선거관리위원회","IT대학","선거시행세칙"),
    동아리연합회_선거시행세칙("동아리연합회 선거관리위원회","동아리연합회","선거시행세칙"),
    //선거위원회 (선거세부지침서)
    중앙선거세부지침서("중앙선거관리위원회","","선거세부지침서"),
    경영대학_선거세부지침서("경영대학 선거관리위원회","경영대학","선거세부지침서"),
    경제통상대학_선거세부지침서("경제통상대학 선거관리위원회","경제통상대학","선거세부지침서"),
    법과대학_선거세부지침서("법과대학 선거관리위원회","법과대학","선거세부지침서"),
    사회과학대학_선거세부지침서("사회과학대학 선거관리위원회","사회과학대학","선거세부지침서"),
    인문대학_선거세부지침서("인문대학 선거관리위원회","인문대학","선거세부지침서"),
    자연과학대학_선거세부지침서("자연과학대학 선거관리위원회","자연과학대학","선거세부지침서"),
    IT대학_선거세부지침서("IT대학 선거관리위원회","IT대학","선거세부지침서"),
    동아리연합회_선거세부지침서("동아리연합회 선거관리위원회","동아리연합회","선거세부지침서"),
    //선거위원회 (특별선거시행세칙)
    중앙특별선거시행세칙("중앙선거관리위원회","","특별선거시행세칙"),
    경영대학_특별선거시행세칙("경영대학 선거관리위원회","경영대학","특별선거시행세칙"),
    경제통상대학_특별선거시행세칙("경제통상대학 선거관리위원회","경제통상대학","특별선거시행세칙"),
    법과대학_특별선거시행세칙("법과대학 선거관리위원회","법과대학","특별선거시행세칙"),
    사회과학대학_특별선거시행세칙("사회과학대학 선거관리위원회","사회과학대학","특별선거시행세칙"),
    인문대학_특별선거시행세칙("인문대학 선거관리위원회","인문대학","특별선거시행세칙"),
    자연과학대학_특별선거시행세칙("자연과학대학 선거관리위원회","자연과학대학","특별선거시행세칙"),
    IT대학_특별선거시행세칙("IT대학 선거관리위원회","IT대학","특별선거시행세칙"),
    동아리연합회_특별선거시행세칙("동아리연합회 선거관리위원회","동아리연합회","특별선거시행세칙"),


    //감사위원회
    회계교육자료("감사기구", "중앙감사위원회", "회계교육자료"),
    중앙_감사시행세칙("감사기구", "중앙감사위원회", "감사시행세칙"),
    경영대학_감사시행세칙("감사기구", "경영대학", "감사시행세칙"),
    경제통상대학_감사시행세칙("감사기구", "경제통상대학", "감사시행세칙"),
    공과대학_감사시행세칙("감사기구", "공과대학", "감사시행세칙"),
    법과대학_감사시행세칙("감사기구", "법과대학", "감사시행세칙"),
    사회과학대학_감사시행세칙("감사기구", "사회과학대학", "감사시행세칙"),
    인문대학_감사시행세칙("감사기구", "인문대학", "감사시행세칙"),
    자연과학대학_감사시행세칙("감사기구", "자연과학대학", "감사시행세칙"),
    IT대학_감사시행세칙("감사기구", "IT대학", "감사시행세칙"),
    //회계지침서
    중앙_회계지침서("감사기구", "중앙감사위원회", "회계지침서"),
    경영대학_회계지침서("감사기구", "경영대학", "회계지침서"),
    경제통상대학_회계지침서("감사기구", "경제통상대학", "회계지침서"),
    공과대학_회계지침서("감사기구", "공과대학", "회계지침서"),
    법과대학_회계지침서("감사기구", "법과대학", "회계지침서"),
    사회과학대학_회계지침서("감사기구", "사회과학대학", "회계지침서"),
    인문대학_회계지침서("감사기구", "인문대학", "회계지침서"),
    자연과학대학_회계지침서("감사기구", "자연과학대학", "회계지침서"),
    IT대학_회계지침서("감사기구", "IT대학", "회계지침서"),
    //감사결과보고서
    중앙_감사결과보고서("감사기구", "중앙감사위원회", "감사결과보고서"),
    경영대학_감사결과보고서("감사기구", "경영대학", "감사결과보고서"),
    경제통상대학_감사결과보고서("감사기구", "경제통상대학", "감사결과보고서"),
    공과대학_감사결과보고서("감사기구", "공과대학", "감사결과보고서"),
    법과대학_감사결과보고서("감사기구", "법과대학", "감사결과보고서"),
    사회과학대학_감사결과보고서("감사기구", "사회과학대학", "감사결과보고서"),
    인문대학_감사결과보고서("감사기구", "인문대학", "감사결과보고서"),
    자연과학대학_감사결과보고서("감사기구", "자연과학대학", "감사결과보고서"),
    IT대학_감사결과보고서("감사기구", "IT대학", "감사결과보고서"),
    //회의록
    중앙_감사회의록("감사기구", "중앙감사위원회", "회의록"),
    경영대학_감사회의록("감사기구", "경영대학", "회의록"),
    경제통상대학_감사회의록("감사기구", "경제통상대학", "회의록"),
    공과대학_감사회의록("감사기구", "공과대학", "회의록"),
    법과대학_감사회의록("감사기구", "법과대학", "회의록"),
    사회과학대학_감사회의록("감사기구", "사회과학대학", "회의록"),
    인문대학_감사회의록("감사기구", "인문대학", "회의록"),
    자연과학대학_감사회의록("감사기구", "자연과학대학", "회의록"),
    IT대학_감사회의록("감사기구", "IT대학", "회의록"),


    //단과대 회식세칙
    경영대학_회칙_세칙("경영대학", "경영대학", "회칙 세칙"),
    경제통상대학_회칙_세칙("경제통상대학", "경제통상대학", "회칙 세칙"),
    공과대학_회칙_세칙("공과대학", "공과대학", "회칙 세칙"),
    법과대학_회칙_세칙("법과대학", "법과대학", "회칙 세칙"),
    사회과학대학_회칙_세칙("사회과학대학", "사회과학대학", "회칙 세칙"),
    인문대학_회칙_세칙("인문대학", "인문대학", "회칙 세칙"),
    자연과학대학_회칙_세칙("자연과학대학", "자연과학대학", "회칙 세칙"),
    IT대학_회칙_세칙("IT대학", "IT대학", "회칙 세칙"),
    융합특성화자유전공학부_회칙_세칙("융합특성화자유전공학부", "융합특성화자유전공학부", "회칙 세칙"),
    동아리연합회_회칙_세칙("동아리연합회", "동아리연합회", "회칙 세칙"),
    //회의록
    경영대학_회의록("경영대학", "경영대학", "회의록"),
    경제통상대학_회의록("경제통상대학", "경제통상대학", "회의록"),
    공과대학_회의록("공과대학", "공과대학", "회의록"),
    법과대학_회의록("법과대학", "법과대학", "회의록"),
    사회과학대학_회의록("사회과학대학", "사회과학대학", "회의록"),
    인문대학_회의록("인문대학", "인문대학", "회의록"),
    자연과학대학_회의록("자연과학대학", "자연과학대학", "회의록"),
    IT대학_회의록("IT대학", "IT대학", "회의록"),
    융합특성화자유전공학부_회의록("융합특성화자유전공학부", "융합특성화자유전공학부", "회의록"),
    단과대회의록("융합특성화자유전공학부", "융합특성화자유전공학부", "회의록"),
    동아리연합회_회의록("동아리연합회", "동아리연합회", "회의록"),
    //예결산안
    경영대학_예결산안("경영대학", "경영대학", "예결산안"),
    경제통상대학_예결산안("경제통상대학", "경제통상대학", "예결산안"),
    공과대학_예결산안("공과대학", "공과대학", "예결산안"),
    법과대학_예결산안("법과대학", "법과대학", "예결산안"),
    사회과학대학_예결산안("사회과학대학", "사회과학대학", "예결산안"),
    인문대학_예결산안("인문대학", "인문대학", "예결산안"),
    자연과학대학_예결산안("자연과학대학", "자연과학대학", "예결산안"),
    IT대학_예결산안("IT대학", "IT대학", "예결산안"),
    융합특성화자유전공학부_예결산안("융합특성화자유전공학부", "융합특성화자유전공학부", "예결산안"),
    동아리연합회_예결산안("동아리연합회", "동아리연합회", "예결산안"),
    //활동보고
    경영대학_활동보고("경영대학", "경영대학", "활동보고"),
    경제통상대학_활동보고("경제통상대학", "경제통상대학", "활동보고"),
    공과대학_활동보고("공과대학", "공과대학", "활동보고"),
    법과대학_활동보고("법과대학", "법과대학", "활동보고"),
    사회과학대학_활동보고("사회과학대학", "사회과학대학", "활동보고"),
    인문대학_활동보고("인문대학", "인문대학", "활동보고"),
    자연과학대학_활동보고("자연과학대학", "자연과학대학", "활동보고"),
    IT대학_활동보고("IT대학", "IT대학", "활동보고"),
    융합특성화자유전공학부_활동보고("융합특성화자유전공학부", "융합특성화자유전공학부", "활동보고"),
    동아리연합회_활동보고("동아리연합회", "동아리연합회", "활동보고"),
    //대표자회의결과보고
    경영대학_대표자회의결과보고("경영대학", "경영대학", "대표자회의결과보고"),
    경제통상대학_대표자회의결과보고("경제통상대학", "경제통상대학", "대표자회의결과보고"),
    공과대학_대표자회의결과보고("공과대학", "공과대학", "대표자회의결과보고"),
    법과대학_대표자회의결과보고("법과대학", "법과대학", "대표자회의결과보고"),
    사회과학대학_대표자회의결과보고("사회과학대학", "사회과학대학", "대표자회의결과보고"),
    인문대학_대표자회의결과보고("인문대학", "인문대학", "대표자회의결과보고"),
    자연과학대학_대표자회의결과보고("자연과학대학", "자연과학대학", "대표자회의결과보고"),
    IT대학_대표자회의결과보고("IT대학", "IT대학", "대표자회의결과보고"),
    융합특성화자유전공학부_대표자회의결과보고("융합특성화자유전공학부", "융합특성화자유전공학부", "대표자회의결과보고"),
    동아리연합회_대표자회의결과보고("동아리연합회", "동아리연합회", "대표자회의결과보고"),


    자료집아님("","","");
    private final String majorCategory;
    private final String middleCategory;
    private final String subCategory;

    public static FileCategory getEnumFileCategoryFromStringCategories(String majorCategory, String middleCategory, String subCategory) {
        return Arrays.stream(values())
                .filter(fileCategory ->
                        fileCategory.majorCategory.equals(majorCategory) &&
                                fileCategory.middleCategory.equals(middleCategory) &&
                                fileCategory.subCategory.equals(subCategory)
                )
                .findFirst()
                .orElseThrow(() -> new InvalidValueException(INVALID_FILE_CATEGORY));
    }

    public static FileCategory getEnumFileCategoryFromString(String stringFileCategory) {
        return Arrays.stream(values())
                .filter(fileCategory -> fileCategory.name().equalsIgnoreCase(stringFileCategory) ||
                        fileCategory.toString().equalsIgnoreCase(stringFileCategory))
                .findFirst()
                .orElseThrow(() -> new InvalidValueException(INVALID_FILE_CATEGORY));
    }
    @Override
    public String toString() {
        return this.name().replace("_", " ");
    }
    public static List<FileCategory> getFileCategoriesByCategories(String majorCategory, String middleCategory, String subCategory) {
        return Arrays.stream(values())
                .filter(fileCategory ->
                        matchCategory(fileCategory.majorCategory, majorCategory) &&
                                matchCategory(fileCategory.middleCategory, middleCategory) &&
                                matchCategory(fileCategory.subCategory, subCategory)
                )
                .collect(Collectors.toList());
    }

    private static boolean matchCategory(String categoryValue, String filterValue) {
        return filterValue == null || categoryValue.equals(filterValue);
    }

    public static FileCategory fromString(String value) {
        try {
            return FileCategory.valueOf(value);
        } catch (IllegalArgumentException e) {
            throw new InvalidValueException(INVALID_FILE_CATEGORY);
        }
    }
}
